param (
    [string]$EncryptedFilePath,
    [string]$Password,
    [string]$DecryptedFilePath
)

# Convert password to a byte array
$passwordBytes = [System.Text.Encoding]::UTF8.GetBytes($Password)

# Ensure the password is 32 bytes (AES-256)
if ($passwordBytes.Length -lt 32) {
    $passwordBytes = $passwordBytes + (0..(31 - $passwordBytes.Length)) # pad with zeros
} elseif ($passwordBytes.Length -gt 32) {
    $passwordBytes = $passwordBytes[0..31] # trim to 32 bytes
}

# Create an AES decryption object
$aes = [System.Security.Cryptography.Aes]::Create()
$aes.Key = $passwordBytes
$aes.IV = @(0..15) # Initialize the IV (all zeros)

# Create a file stream to read the encrypted file
$encryptedStream = [System.IO.File]::OpenRead($EncryptedFilePath)

# Create a file stream to write the decrypted file
$decryptedStream = [System.IO.File]::OpenWrite($DecryptedFilePath)

# Create a crypto stream to handle the decryption
$cryptoStream = New-Object System.Security.Cryptography.CryptoStream($encryptedStream, $aes.CreateDecryptor(), [System.Security.Cryptography.CryptoStreamMode]::Read)

# Read from the crypto stream and write to the decrypted file
$cryptoStream.CopyTo($decryptedStream)

# Close the streams
$cryptoStream.Close()
$encryptedStream.Close()
$decryptedStream.Close()

Write-Host "CSV file has been decrypted successfully."
